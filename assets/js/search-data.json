{
  
    
        "post0": {
            "title": "Getting_started_htmlversion",
            "content": "&lt;!DOCTYPE html&gt; . getting_started . JupyterDash&#182; . The jupyter-dash package makes it easy to develop Plotly Dash apps from the Jupyter Notebook and JupyterLab. . Just replace the standard dash.Dash class with the jupyter_dash.JupyterDash subclass. . In&nbsp;[1]: from jupyter_dash import JupyterDash . In&nbsp;[2]: import dash import dash_core_components as dcc import dash_html_components as html import pandas as pd . When running in JupyterHub or Binder, call the infer_jupyter_config function to detect the proxy configuration. . In&nbsp;[4]: JupyterDash.infer_jupyter_proxy_config() . Load and preprocess data . In&nbsp;[5]: df = pd.read_csv(&#39;https://plotly.github.io/datasets/country_indicators.csv&#39;) available_indicators = df[&#39;Indicator Name&#39;].unique() . Construct the app and callbacks . In&nbsp;[6]: external_stylesheets = [&#39;https://codepen.io/chriddyp/pen/bWLwgP.css&#39;] app = JupyterDash(__name__, external_stylesheets=external_stylesheets) # Create server variable with Flask server object for use with gunicorn server = app.server app.layout = html.Div([ html.Div([ html.Div([ dcc.Dropdown( id=&#39;crossfilter-xaxis-column&#39;, options=[{&#39;label&#39;: i, &#39;value&#39;: i} for i in available_indicators], value=&#39;Fertility rate, total (births per woman)&#39; ), dcc.RadioItems( id=&#39;crossfilter-xaxis-type&#39;, options=[{&#39;label&#39;: i, &#39;value&#39;: i} for i in [&#39;Linear&#39;, &#39;Log&#39;]], value=&#39;Linear&#39;, labelStyle={&#39;display&#39;: &#39;inline-block&#39;} ) ], style={&#39;width&#39;: &#39;49%&#39;, &#39;display&#39;: &#39;inline-block&#39;}), html.Div([ dcc.Dropdown( id=&#39;crossfilter-yaxis-column&#39;, options=[{&#39;label&#39;: i, &#39;value&#39;: i} for i in available_indicators], value=&#39;Life expectancy at birth, total (years)&#39; ), dcc.RadioItems( id=&#39;crossfilter-yaxis-type&#39;, options=[{&#39;label&#39;: i, &#39;value&#39;: i} for i in [&#39;Linear&#39;, &#39;Log&#39;]], value=&#39;Linear&#39;, labelStyle={&#39;display&#39;: &#39;inline-block&#39;} ) ], style={&#39;width&#39;: &#39;49%&#39;, &#39;float&#39;: &#39;right&#39;, &#39;display&#39;: &#39;inline-block&#39;}) ], style={ &#39;borderBottom&#39;: &#39;thin lightgrey solid&#39;, &#39;backgroundColor&#39;: &#39;rgb(250, 250, 250)&#39;, &#39;padding&#39;: &#39;10px 5px&#39; }), html.Div([ dcc.Graph( id=&#39;crossfilter-indicator-scatter&#39;, hoverData={&#39;points&#39;: [{&#39;customdata&#39;: &#39;Japan&#39;}]} ) ], style={&#39;width&#39;: &#39;49%&#39;, &#39;display&#39;: &#39;inline-block&#39;, &#39;padding&#39;: &#39;0 20&#39;}), html.Div([ dcc.Graph(id=&#39;x-time-series&#39;), dcc.Graph(id=&#39;y-time-series&#39;), ], style={&#39;display&#39;: &#39;inline-block&#39;, &#39;width&#39;: &#39;49%&#39;}), html.Div(dcc.Slider( id=&#39;crossfilter-year--slider&#39;, min=df[&#39;Year&#39;].min(), max=df[&#39;Year&#39;].max(), value=df[&#39;Year&#39;].max(), marks={str(year): str(year) for year in df[&#39;Year&#39;].unique()}, step=None ), style={&#39;width&#39;: &#39;49%&#39;, &#39;padding&#39;: &#39;0px 20px 20px 20px&#39;}) ]) @app.callback( dash.dependencies.Output(&#39;crossfilter-indicator-scatter&#39;, &#39;figure&#39;), [dash.dependencies.Input(&#39;crossfilter-xaxis-column&#39;, &#39;value&#39;), dash.dependencies.Input(&#39;crossfilter-yaxis-column&#39;, &#39;value&#39;), dash.dependencies.Input(&#39;crossfilter-xaxis-type&#39;, &#39;value&#39;), dash.dependencies.Input(&#39;crossfilter-yaxis-type&#39;, &#39;value&#39;), dash.dependencies.Input(&#39;crossfilter-year--slider&#39;, &#39;value&#39;)]) def update_graph(xaxis_column_name, yaxis_column_name, xaxis_type, yaxis_type, year_value): dff = df[df[&#39;Year&#39;] == year_value] return { &#39;data&#39;: [dict( x=dff[dff[&#39;Indicator Name&#39;] == xaxis_column_name][&#39;Value&#39;], y=dff[dff[&#39;Indicator Name&#39;] == yaxis_column_name][&#39;Value&#39;], text=dff[dff[&#39;Indicator Name&#39;] == yaxis_column_name][&#39;Country Name&#39;], customdata=dff[dff[&#39;Indicator Name&#39;] == yaxis_column_name][&#39;Country Name&#39;], mode=&#39;markers&#39;, marker={ &#39;size&#39;: 25, &#39;opacity&#39;: 0.7, &#39;color&#39;: &#39;orange&#39;, &#39;line&#39;: {&#39;width&#39;: 2, &#39;color&#39;: &#39;purple&#39;} } )], &#39;layout&#39;: dict( xaxis={ &#39;title&#39;: xaxis_column_name, &#39;type&#39;: &#39;linear&#39; if xaxis_type == &#39;Linear&#39; else &#39;log&#39; }, yaxis={ &#39;title&#39;: yaxis_column_name, &#39;type&#39;: &#39;linear&#39; if yaxis_type == &#39;Linear&#39; else &#39;log&#39; }, margin={&#39;l&#39;: 40, &#39;b&#39;: 30, &#39;t&#39;: 10, &#39;r&#39;: 0}, height=450, hovermode=&#39;closest&#39; ) } def create_time_series(dff, axis_type, title): return { &#39;data&#39;: [dict( x=dff[&#39;Year&#39;], y=dff[&#39;Value&#39;], mode=&#39;lines+markers&#39; )], &#39;layout&#39;: { &#39;height&#39;: 225, &#39;margin&#39;: {&#39;l&#39;: 20, &#39;b&#39;: 30, &#39;r&#39;: 10, &#39;t&#39;: 10}, &#39;annotations&#39;: [{ &#39;x&#39;: 0, &#39;y&#39;: 0.85, &#39;xanchor&#39;: &#39;left&#39;, &#39;yanchor&#39;: &#39;bottom&#39;, &#39;xref&#39;: &#39;paper&#39;, &#39;yref&#39;: &#39;paper&#39;, &#39;showarrow&#39;: False, &#39;align&#39;: &#39;left&#39;, &#39;bgcolor&#39;: &#39;rgba(255, 255, 255, 0.5)&#39;, &#39;text&#39;: title }], &#39;yaxis&#39;: {&#39;type&#39;: &#39;linear&#39; if axis_type == &#39;Linear&#39; else &#39;log&#39;}, &#39;xaxis&#39;: {&#39;showgrid&#39;: False} } } @app.callback( dash.dependencies.Output(&#39;x-time-series&#39;, &#39;figure&#39;), [dash.dependencies.Input(&#39;crossfilter-indicator-scatter&#39;, &#39;hoverData&#39;), dash.dependencies.Input(&#39;crossfilter-xaxis-column&#39;, &#39;value&#39;), dash.dependencies.Input(&#39;crossfilter-xaxis-type&#39;, &#39;value&#39;)]) def update_y_timeseries(hoverData, xaxis_column_name, axis_type): country_name = hoverData[&#39;points&#39;][0][&#39;customdata&#39;] dff = df[df[&#39;Country Name&#39;] == country_name] dff = dff[dff[&#39;Indicator Name&#39;] == xaxis_column_name] title = &#39;&lt;b&gt;{}&lt;/b&gt;&lt;br&gt;{}&#39;.format(country_name, xaxis_column_name) return create_time_series(dff, axis_type, title) @app.callback( dash.dependencies.Output(&#39;y-time-series&#39;, &#39;figure&#39;), [dash.dependencies.Input(&#39;crossfilter-indicator-scatter&#39;, &#39;hoverData&#39;), dash.dependencies.Input(&#39;crossfilter-yaxis-column&#39;, &#39;value&#39;), dash.dependencies.Input(&#39;crossfilter-yaxis-type&#39;, &#39;value&#39;)]) def update_x_timeseries(hoverData, yaxis_column_name, axis_type): dff = df[df[&#39;Country Name&#39;] == hoverData[&#39;points&#39;][0][&#39;customdata&#39;]] dff = dff[dff[&#39;Indicator Name&#39;] == yaxis_column_name] return create_time_series(dff, axis_type, yaxis_column_name) . Serve the app using run_server. Unlike the standard Dash.run_server method, the JupyterDash.run_server method doesn&#39;t block execution of the notebook. It serves the app in a background thread, making it possible to run other notebook calculations while the app is running. . This makes it possible to iterativly update the app without rerunning the potentially expensive data processing steps. . In&nbsp;[7]: app.run_server() . Dash app running on http://127.0.0.1:8050/ . By default, run_server displays a URL that you can click on to open the app in a browser tab. The mode argument to run_server can be used to change this behavior. Setting mode=&quot;inline&quot; will display the app directly in the notebook output cell. . In&nbsp;[8]: app.run_server(mode=&quot;inline&quot;) . When running in JupyterLab, with the jupyterlab-dash extension, setting mode=&quot;jupyterlab&quot; will open the app in a tab in JupyterLab. . app.run_server(mode=&quot;jupyterlab&quot;) . In&nbsp;[&nbsp;]: . .",
            "url": "https://bombagian.github.io/gbnotes/2020/06/20/getting_started_htmlversion.html",
            "relUrl": "/2020/06/20/getting_started_htmlversion.html",
            "date": " • Jun 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://bombagian.github.io/gbnotes/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://bombagian.github.io/gbnotes/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://bombagian.github.io/gbnotes/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://bombagian.github.io/gbnotes/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}